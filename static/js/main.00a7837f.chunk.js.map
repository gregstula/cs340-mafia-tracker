{"version":3,"sources":["components/serverUrl.js","components/Families.js","components/Individuals.js","components/Laws.js","components/Businesses.js","App.js","reportWebVitals.js","index.js"],"names":["serverUrl","entity","FamilyForm","props","handleSubmit","onClick","state","familyID","handleOnChange","e","target","value","name","setState","data","Form","Row","Group","as","Col","Control","size","type","placeholder","this","familyName","onChange","Button","React","Component","Families","useState","familyList","setfamilyList","tableView","setTableView","baseUrl","useEffect","axios","get","then","response","updatefamily","id","input","updateUrl","put","DropDownFamilyActions","DropdownButton","title","Dropdown","Item","UpdateModal","family","deleteUrl","Axios","delete","deletefamily","show","setShow","handleClose","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Footer","variant","FamilyRow","memberCount","Container","fluid","createUrl","post","Table","bordered","hover","map","index","IndividualForm","individualID","firstName","lastName","age","mafiaFamily","mafiaRole","showingBusinesses","showingLawsBroken","searchTerm","Individuals","individualList","setIndividualList","PersonRow","person","DropDownPersonActions","PrintBusinessesOwned","findIndex","val","personID","businessesList","businessesOwned","colSpan","striped","business","businessName","buildingNumber","streetName","city","zip","setBusinessOwnerToNullUrl","i","businessVal","businessID","splice","SetBusinessOwnerToNull","searchInput","addableBusinesses","GetAddableBusinesses","DisplayAddableBusinesses","length","fName","lName","businessUrl","businessIndex","resonse","SetBusinessOwner","PrintLawsBroken","lawsList","lawsBroken","law","lawName","sentence","lawID","unBreakLawUrl","respons","UnBreakLaw","breakableLaws","GetBreakableLaws","PrintBreakableLaws","lawUrl","BreakLaw","push","GetBusinessesOwned","GetLawsBroken","deleteIndividual","updateIndividual","getUrl","laws","Laws","lawsShown","setLawsShown","LawRow","DropDownLawActions","LawRowBreakers","showLawBreakers","IndividualSubTable","lawBreakers","fname","lname","console","log","szie","Fragment","BusinessForm","Businesses","businessList","setBusinessList","updateBusiness","DropDownBusinessActions","deleteBusiness","BusinessRow","individualOwner","familyOwner","Home","App","Navbar","bg","Brand","Nav","className","Link","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00a7837f.chunk.js","sourcesContent":["// change var for local or hosted\n\nfunction serverUrl(entity) {\n    //const baseUrl = 'https://cs340-mafia-server.herokuapp.com/' + entity;\n    const baseUrl = 'http://localhost:8000/' + entity;\n    return baseUrl;\n}\n\nexport default serverUrl;\n","import { Container, Form, Button, Row, Col, Table, Dropdown, DropdownButton, Modal } from 'react-bootstrap';\nimport React from 'react';\nimport { Fragment, useEffect, useState, useRef } from \"react\";\nimport Axios from \"axios\";\nimport axios from 'axios';\nimport serverUrl from './serverUrl';\n\n// Component for family form\n// Much more effecient at handling state and saving render calls\n// Can also be used in Update Component\nclass FamilyForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.familyID) {\n      onClick(this.state.familyID, this.state)\n    } else {\n      onClick(this.state);\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Name\" name=\"familyName\" value={this.state.familyName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\nfunction Families() {\n\n  const [familyList, setfamilyList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl('families');\n\n  // Fetched the table data when tableView is changed the whole page reRenders with another Select query\n  // using familyList as the second argument causes a loop!!\n  useEffect(() => {\n    axios.get(baseUrl).then(response => setfamilyList(response.data));\n  }, [tableView]);\n\n\n  const addfamily = (input) => {\n    const createUrl = baseUrl + \"/create\";\n    Axios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  };\n\n  // delete handler\n  const deletefamily = (id) => {\n    const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  // update handler\n  const updatefamily = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input).then(response => setTableView([]));\n  };\n\n  function DropDownFamilyActions(props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => null}>Show/Hide Family members</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => null}>Show/Hide businesses owned</Dropdown.Item>\n        <Dropdown.Item as={UpdateModal} family={props.family} />\n        <Dropdown.Item as=\"button\" onClick={() => deletefamily(props.family.familyID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  // Modal pop up form for update form submission\n  function UpdateModal(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal\n          size=\"xl\"\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={true}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.family.familyName} ID: {props.family.familyID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <FamilyForm type=\"Update\" onClick={updatefamily} data={props.family} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n\n  function FamilyRow(props) {\n    return (\n      <tr>\n        <td>{props.family.familyID}</td>\n        <td>{props.family.familyName}</td>\n        <td>{props.family.memberCount}</td>\n        <td>\n          <DropDownFamilyActions family={props.family} />\n        </td>\n      </tr>\n    );\n  }\n\n\n  return (\n    <Container fluid>\n      <h1>Families</h1>\n      <FamilyForm type=\"Create\" onClick={addfamily} />\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Member Count</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            familyList.map((family, index) => (\n              <Fragment key={family.familyID}>\n                <FamilyRow family={family} />\n              </Fragment>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default Families;\n\n\n{/* var families = [\n  {\n    \"id\": 1,\n    \"name\": \"Omerta\",\n    \"memberCount\": 2,\n    \"members\": [\n      {\n        \"fname\": \"Bill\",\n        \"lname\": \"Omerta\",\n        \"role\": \"Godfather\"\n      },\n      {\n        \"fname\": \"Matthew\",\n        \"lname\": \"Omerta\",\n        \"role\": \"Captain\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"USA Industries\",\n        \"address\": \"1221 Industrial Rd\",\n        \"city\": \"Newark\",\n        \"state\": \"New Jersey\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Murphy\",\n    \"memberCount\": 5,\n    \"members\": [\n      {\n        \"fname\": \"Brian\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Godfather\"\n      },\n      {\n        \"fname\": \"John\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Phil\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Frank\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Alex\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Edgar\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"Domino's\",\n        \"address\": \"54232 NW Road Blvd\",\n        \"city\": \"Corvallis\",\n        \"state\": \"Oregon\"\n      },\n      {\n        \"name\": \"Pizza Hut\",\n        \"address\": \"812 East Blvd\",\n        \"city\": \"Corvallis\",\n        \"state\": \"Oregon\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Scott\",\n    \"memberCount\": 2,\n    \"members\": [\n      {\n        \"fname\": \"Michael\",\n        \"lname\": \"Scott\",\n        \"role\": \"Regional Manager\"\n      },\n      {\n        \"fname\": \"Dwight\",\n        \"lname\": \"Shrewt\",\n        \"role\": \"Assistant to the Regional Manager\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"Dunder Mifflin\",\n        \"address\": \"4120 22nd St\",\n        \"city\": \"Scranton\",\n        \"state\": \"Pennsylvania\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  }\n]\n\n\n\n\nfunction Families() {\n\n  const [membersShown, setMembersShown] = useState(false);\n  const [familyesShown, setfamilyesShown] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n\n  function FamilyRow(props) {\n    if(families[props.index].editMode)\n      return(\n        <tr>\n          <td>{families[props.index].id}</td>\n          <td>\n            <Form>\n              <Form.Control size=\"m\" type=\"text\" value={families[props.index].name} />\n            </Form>\n          </td>\n          <td>#</td>\n          <td><Button type=\"submit\" onClick={() => toggleEditMode(props.index)}>Submit</Button></td>\n        </tr>\n      );\n    else\n      return (\n          <tr>\n            <td>{families[props.index].id}</td>\n            <td>{families[props.index].name}</td>\n            <td>{families[props.index].memberCount}</td>\n            <td>\n              <DropDownFamilyActions index={props.index}/>\n            </td>\n          </tr>\n      );\n  }\n\n\n  function DropDownFamilyActions (props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => ShowMembersSubTable(props.index)}>Show Members</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => ShowfamilySubTable(props.index)}>Show familyes</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => toggleEditMode(props.index)}>Update</Dropdown.Item>\n        <Dropdown.Item as=\"button\">Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  function familyesToggle(props) {\n    if(!families[props.index].showfamilyes)\n      return null;\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          <familySubTable index={props.index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function MembersToggle(props) {\n    if(!families[props.index].showMembers)\n      return null;\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          <MembersSubTable index={props.index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function ShowMembersSubTable(index) {\n    families[index].showMembers = !families[index].showMembers;\n    setMembersShown(!membersShown);\n  }\n\n  function ShowfamilySubTable(index) {\n    families[index].showfamilyes = !families[index].showfamilyes;\n    setfamilyesShown(!familyesShown);\n  }\n\n  function MembersSubTable(props) {\n    return (\n      <Container>\n          <b>Members</b>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Role</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              families[props.index].members.map(member => (\n                <tr>\n                  <td>{member.fname}</td>\n                  <td>{member.lname}</td>\n                  <td>{member.role}</td>\n                  <td><Button size=\"sm\" variant=\"danger\" type=\"delete\">Delete</Button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </Table>\n        <Form>\n          <Form.Control size=\"m\" type=\"text\" placeholder=\"Search for existing member to add to family\" />\n        </Form>\n      </Container>\n    );\n  }\n\n  function familySubTable(props) {\n    return (\n      <Container>\n          <b>familyes Ownes</b>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>family Name</th>\n              <th>Street Address</th>\n              <th>City</th>\n              <th>State</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              families[props.index].familyes.map(family => (\n                <tr>\n                  <td>{family.name}</td>\n                  <td>{family.address}</td>\n                  <td>{family.city}</td>\n                  <td>{family.state}</td>\n                  <td><Button size=\"sm\" variant=\"danger\" type=\"delete\">Delete</Button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </Table>\n        <Form>\n          <Form.Control size=\"m\" type=\"text\" placeholder=\"Search for existing family to add to familyes owned by this family\" />\n        </Form>\n      </Container>\n    );\n  }\n\n  function toggleEditMode(index) {\n    families[index].editMode = !families[index].editMode;\n    setEditMode(!editMode);\n  }\n\n  return (\n    <Container fluid>\n    <h1>Families</h1>\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th># of members</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          <tr>\n              <td>Input new family</td>\n            <td>\n              <Form>\n                <Form.Control size=\"lg\" type=\"text\" placeholder=\"Name\" />\n              </Form>\n            </td>\n            <td>#</td>\n            <td>\n              <Button type=\"submit\">Create</Button>\n            </td>\n          </tr>\n          {\n            families.map((family, index) => (\n              <>\n                <FamilyRow index={index} />\n                <MembersToggle index={index} />\n                <familyesToggle index={index} />\n              </>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\n\nexport default Families; */}\n","import {Container, Form/*, Row*/, Col, Button, Table, Dropdown, DropdownButton, Modal} from 'react-bootstrap';\n//import Actions from './Actions';\n\nimport React, { Fragment, useEffect, useState/*, useRef*/ } from 'react';\n\nimport Axios from \"axios\";\nimport axios from 'axios';\n\nimport serverUrl from './serverUrl';\n\n\nclass IndividualForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.individualID) {\n      onClick(this.state.individualID, this.state) //since individualID is available, we're updating something\n    } else {\n      onClick(this.state); //since individualID is unavailable, we're making a new individual\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"First name\" name=\"firstName\" value={this.state.firstName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Last name\" name=\"lastName\" value={this.state.lastName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Age\" name=\"age\" value={this.state.age} onChange={this.handleOnChange} />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Mafia family (exact)\" name=\"mafiaFamily\" value={this.state.mafiaFamily} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Role in family\" name=\"mafiaRole\" value={this.state.mafiaRole} onChange={this.handleOnChange} />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\n\nvar showingBusinesses = [];\nvar showingLawsBroken = [];\nvar searchTerm = \"\";\n\nfunction Individuals() {\n\n  const [individualList, setIndividualList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl(\"individuals\");\n\n  useEffect(() => {\n    var getUrl = serverUrl(\"individuals\")\n    if(searchTerm !== \"\")\n      getUrl += `/${searchTerm}`;\n\n    axios.get(getUrl).then(response => setIndividualList(response.data));\n  }, [tableView]);\n\n\n  function PersonRow(props) {\n    return (\n        <tr>\n          <td>{props.person.individualID}</td>\n          <td>{props.person.firstName}</td>\n          <td>{props.person.lastName}</td>\n          <td>{props.person.age}</td>\n          <td>{props.person.familyName}</td>\n          <td>{props.person.mafiaRole}</td>\n          <td>\n            <DropDownPersonActions person={props.person}/>\n          </td>\n        </tr>\n    );\n  }\n\n\n  function GetBusinessesOwned(personID) {\n    //find the guy we're looking for, adding him if he doesn't exist\n    var index = showingBusinesses.findIndex((val) => {return val.personID === personID})\n    if(index < 0)\n    {\n      showingBusinesses.push({\"personID\": personID, \"businessesOwned\": [], \"addableBusinesses\": []});\n      index = showingBusinesses.length - 1;\n\n      Axios.get(baseUrl + `/getBusinesses/${personID}`).then(response => {\n        showingBusinesses[index].businessesOwned = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingBusinesses.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintBusinessesOwned(props) {\n    var index = showingBusinesses.findIndex((val) => {return val.personID === props.person.individualID});\n    if(index < 0)\n      return null;\n\n    var businessesList = showingBusinesses[index].businessesOwned;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Businesses owned</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Number</th>\n                    <th>street Name</th>\n                    <th>City</th>\n                    <th>State</th>\n                    <th>Zip</th>\n                    <th>Family owner</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    businessesList.map(business => (\n                      <tr>\n                        <td>{business.businessName}</td>\n                        <td>{business.buildingNumber}</td>\n                        <td>{business.streetName}</td>\n                        <td>{business.city}</td>\n                        <td>{business.state}</td>\n                        <td>{business.zip}</td>\n                        <td>{business.familyName}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => SetBusinessOwnerToNull(business.businessID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetAddableBusinesses(input.target.value, index)\n                    }\n                    else {\n                      showingBusinesses[index].addableBusinesses = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing business to add to businesses owned by this person\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingBusinesses[index].addableBusinesses = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <DisplayAddableBusinesses index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetAddableBusinesses(searchInput, index) {\n\n    Axios.get(baseUrl + `/searchBusinesses/${searchInput}`).then(response => {\n      showingBusinesses[index].addableBusinesses = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function DisplayAddableBusinesses(props) {\n\n    var index = props.index;\n\n    if(showingBusinesses[index].addableBusinesses.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Business Name</th>\n            <th>City</th>\n            <th>State</th>\n            <th>Current Owner</th>\n            <th>Family Owner</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingBusinesses[index].addableBusinesses.map(business => {\n            var fName = business.firstName;\n            var lName = business.lastName;\n            if(!fName)\n              fName = \"\";\n            else\n              lName = \" \" + lName;\n            if(!lName)\n              lName = \"\";\n\n            return (\n              <tr>\n                <td>{business.businessName}</td>\n                <td>{business.city}</td>\n                <td>{business.state}</td>\n                <td>{fName + lName}</td>\n                <td>{business.familyName}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => SetBusinessOwner(business.businessID, showingBusinesses[index].personID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function SetBusinessOwner(businessID, personID) {\n    const businessUrl = baseUrl + `/setBusinessOwner/${businessID}/${personID}`;\n\n    //if that business was already owned, we need to remove it from the previous owner's businessesOwned\n    showingBusinesses.map(person => {\n      var businessIndex = person.businessesOwned.findIndex(business => {return business.businessID === businessID});\n      if(businessIndex >= 0) {\n        //we've got it, so remove it\n        person.businessesOwned.splice(businessIndex, 1);\n        //return true so that we stop looking\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    Axios.put(businessUrl).then(resonse => {\n      Axios.get(baseUrl + `/getBusinesses/${personID}`).then(response => {\n        var index = showingBusinesses.findIndex((val) => {return val.personID === personID});\n        showingBusinesses[index].businessesOwned = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function SetBusinessOwnerToNull(id) {\n    const setBusinessOwnerToNullUrl = baseUrl + `/setBusinessOwnerToNull/${id}`;\n    Axios.put(setBusinessOwnerToNullUrl).then((response) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingBusinesses.map((person) => {\n        var i = person.businessesOwned.findIndex((businessVal) => {return businessVal.businessID === id});\n        if(i >= 0)\n          person.businessesOwned.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function GetLawsBroken(personID) {\n    //find the guy we're looking for, adding him if he doesn't exist\n    var index = showingLawsBroken.findIndex((val) => {return val.personID === personID})\n    if(index < 0)\n    {\n      showingLawsBroken.push({\"personID\": personID, \"lawsBroken\": [], \"breakableLaws\": []});\n      index = showingLawsBroken.length - 1;\n\n      Axios.get(baseUrl + `/getLawsBroken/${personID}`).then(response => {\n        showingLawsBroken[index].lawsBroken = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingLawsBroken.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintLawsBroken(props) {\n    var index = showingLawsBroken.findIndex((val) => {return val.personID === props.person.individualID});\n\n    if(index < 0)\n      return null;\n\n    var lawsList = showingLawsBroken[index].lawsBroken;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Laws broken</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Law Name</th>\n                    <th>Sentence</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    lawsList.map(law => (\n                      <tr>\n                        <td>{law.lawName}</td>\n                        <td>{law.sentence}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => UnBreakLaw(law.lawID, props.person.individualID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetBreakableLaws(input.target.value, index)\n                    }\n                    else {\n                      showingLawsBroken[index].breakableLaws = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing laws to add to list of laws broken by this person\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingLawsBroken[index].breakableLaws = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <PrintBreakableLaws index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetBreakableLaws(searchInput, index) {\n    Axios.get(baseUrl + `/searchLaws/${searchInput}`).then(response => {\n      showingLawsBroken[index].breakableLaws = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function PrintBreakableLaws(props) {\n    var index = props.index;\n\n    if(showingLawsBroken[index].breakableLaws.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Law Name</th>\n            <th>Sentence</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingLawsBroken[index].breakableLaws.map(law => {\n            return (\n              <tr>\n                <td>{law.lawName}</td>\n                <td>{law.sentence}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => BreakLaw(law.lawID, showingLawsBroken[index].personID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function BreakLaw(lawID, personID) {\n    const lawUrl = baseUrl + `/breakLaw/${lawID}/${personID}`;\n\n    Axios.put(lawUrl).then(resonse => {\n      Axios.get(baseUrl + `/getLawsBroken/${personID}`).then(response => {\n        var index = showingLawsBroken.findIndex((val) => {return val.personID === personID});\n        showingLawsBroken[index].lawsBroken = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function UnBreakLaw(lawID, personID) {\n    const unBreakLawUrl = baseUrl + `/unBreakLaw/${lawID}/${personID}`;\n    Axios.delete(unBreakLawUrl).then((respons) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingLawsBroken.map((person) => {\n        var i = person.lawsBroken.findIndex((law) => {return law.lawID === lawID});\n        if(i >= 0)\n          person.lawsBroken.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function DropDownPersonActions (props) {\n\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => GetBusinessesOwned(props.person.individualID)}>Show/Hide businesses owned</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => GetLawsBroken(props.person.individualID)}>Show/Hide laws broken</Dropdown.Item>\n        <Dropdown.Item as={UpdateModal} person={props.person} />\n        <Dropdown.Item as=\"button\" onClick={() => deleteIndividual(props.person.individualID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n\n  const addIndividual = (input) => {\n  \tconst createUrl = baseUrl + \"/create\";\n  \tAxios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  }\n\n  function UpdateModal(props) {\n\t   const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal size=\"xl\" show={show} onHide={handleClose} backdrop=\"static\" keyboard={true}>\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.person.firstName + \" \" + props.person.lastName} ID: {props.person.individualID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <IndividualForm type=\"Update\" onClick={updateIndividual} data={props.person} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  const updateIndividual = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input ).then(response => setTableView([]));\n  };\n\n  const deleteIndividual = (id) => {\n\t   const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  return (\n    <Container fluid>\n      <h1>Individuals</h1>\n\n      <Form>\n        <Form.Row>\n          <Col>\n            <Form.Control size=\"m\" type=\"text\" placeholder=\"Search by first or last name (not both)\" onChange={(input) => {\n              searchTerm = input.target.value;\n            }}/>\n          </Col>\n          <Col>\n            <Button type=\"search\" onClick={() => {\n              setTableView([]);\n            }}>Search</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <p></p>\n\n\t  <IndividualForm type=\"Create\" onClick={addIndividual} data={{\"firstName\": \"\", \"lastName\":\"\", \"age\":\"\", \"mafiaFamily\":\"\", \"mafiaRole\":\"\"}}/>\n\n\t  <p></p>\n\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Age</th>\n            <th>Mafia Family</th>\n            <th>Mafia Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {\n            individualList.map((person, index) => (\n              <Fragment key={person.individualID}>\n                <PersonRow person={person} />\n                <PrintBusinessesOwned person={person} />\n                <PrintLawsBroken person={person} />\n              </Fragment>\n            ))\n          }\n\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\n\n\n\n\nexport default Individuals;\n","import {Container, Form, Button} from 'react-bootstrap';\nimport Table from 'react-bootstrap/Table'\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\n\nimport React, { useState } from 'react';\n\nvar laws = [\n  {\n    \"id\":1,\n    \"name\":\"Extortion\",\n    \"sentence\":\"3 years\",\n    \"showLawBreakers\":false,\n    \"lawBreakers\": [\n      {\n        \"fname\":\"Andrew\",\n        \"lname\":\"Douglas\"\n      },\n      {\n        \"fname\":\"Tony\",\n        \"lname\":\"Soprano\"\n      }\n    ]\n  },\n  {\n    \"id\":2,\n    \"name\":\"Fraud\",\n    \"sentence\":\"10 years\",\n    \"showLawBreakers\":false,\n    \"lawBreakers\": [\n      {\n        \"fname\":\"Andrew\",\n        \"lname\":\"Douglas\"\n      },\n      {\n        \"fname\":\"Tony\",\n        \"lname\":\"Soprano\"\n      },\n      {\n        \"fname\":\"Oliver\",\n        \"lname\":\"Twist\"\n      }\n    ]\n  },\n  {\n    \"id\":3,\n    \"name\":\"Tax Evasion\",\n    \"sentence\":\"15 years\",\n    \"showLawBreakers\":false,\n    \"lawBreakers\": [\n      {\n        \"fname\":\"Bill\",\n        \"lname\":\"Omerta\"\n      },\n      {\n        \"fname\":\"Joe\",\n        \"lname\":\"Alpha\"\n      },\n      {\n        \"fname\":\"Andrew\",\n        \"lname\":\"Douglas\"\n      },\n      {\n        \"fname\":\"Tony\",\n        \"lname\":\"Soprano\"\n      },\n      {\n        \"fname\":\"Oliver\",\n        \"lname\":\"Twist\"\n      }\n    ]\n  },\n];\n\n\n\nfunction Laws() {\n    const [lawsShown, setLawsShown] = useState(false);\n\n\n    function LawRow(props) {\n      return (\n          <tr>\n            <td>{laws[props.index].id}</td>\n            <td>{laws[props.index].name}</td>\n            <td>{laws[props.index].sentence}</td>\n            <td>\n              <DropDownLawActions index={props.index}/>\n            </td>\n          </tr>\n      );\n    }\n\n\n    function LawRowBreakers(props) {\n      if(!laws[props.index].showLawBreakers)\n        return null;\n      return (\n        <tr>\n          <td colSpan=\"5\">\n            <IndividualSubTable index={props.index}/>\n          </td>\n        </tr>\n      );\n    }\n\n\n    function IndividualSubTable(props) {\n      return (\n        <Container>\n            <b>Law Breakers</b>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                laws[props.index].lawBreakers.map(person => (\n                  <tr>\n                    <td>{person.fname}</td>\n                    <td>{person.lname}</td>\n                    <td><Button size=\"sm\" variant=\"danger\" type=\"delete\">Delete</Button></td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </Table>\n          <Form>\n            <Form.Control size=\"m\" type=\"text\" placeholder=\"Search for existing person to add to the list of people that have broken this law\" />\n          </Form>\n        </Container>\n      );\n    }\n\n\n    function DropDownLawActions (props) {\n      return (\n        <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n          <Dropdown.Item as=\"button\" onClick={() => ShowLawBreakersSubTable(props.index)}>Show law breakers</Dropdown.Item>\n          <Dropdown.Item as=\"button\">Update</Dropdown.Item>\n          <Dropdown.Item as=\"button\">Delete</Dropdown.Item>\n        </DropdownButton>\n      );\n    }\n\n\n    function ShowLawBreakersSubTable(index) {\n      console.log(\"index = \" + index);\n      laws[index].showLawBreakers = !laws[index].showLawBreakers;\n      setLawsShown(!lawsShown);\n      //forceUpdate();\n    }\n\n\n    // const popoverLawActions = (\n    //   <Popover id=\"popover-basic\">\n    //     <Popover.Content>\n    //       <Button size=\"sm\" type=\"showHideSubTable\">Show law breakers</Button>\n    //       <br></br><br></br>\n    //       <Actions />\n    //     </Popover.Content>\n    //   </Popover>\n    // );\n\n\n     return (\n      <Container fluid>\n      <h1>Laws</h1>\n        <Table bordered hover>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Sentence</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n           <tr>\n               <td>\n                   Auto\n               </td>\n              <td>\n                <Form>\n                  <Form.Control size=\"lg\" type=\"text\" placeholder=\"Name\" />\n                </Form>\n              </td>\n              <td>\n                <Form>\n                  <Form.Control size=\"lg\" type=\"text\" placeholder=\"Sentence\" />\n                </Form>\n              </td>\n              <td>\n                <Button szie=\"sm\" type=\"submit\">Create</Button>\n              </td>\n            </tr>\n\n            {\n              laws.map((law, index) => (\n                <React.Fragment>\n                  <LawRow index={index} />\n                  <LawRowBreakers index={index} />\n                </React.Fragment>\n              ))\n            }\n\n          </tbody>\n        </Table>\n      </Container>\n  );\n}\n\n\n\n\n\nexport default Laws;\n","import { Container, Form, Button, Col, Table, Dropdown, DropdownButton, Modal } from 'react-bootstrap';\nimport React from 'react';\nimport { Fragment, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport axios from 'axios';\nimport serverUrl from './serverUrl';\n\n// Component for business form\n// Much more effecient at handling state and saving render calls\n// Can also be used in Update Component\nclass BusinessForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.businessID) {\n      onClick(this.state.businessID, this.state)\n    } else {\n      onClick(this.state);\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Name\" name=\"businessName\" value={this.state.businessName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Building Number\" name=\"buildingNumber\" value={this.state.buildingNumber} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Street\" name=\"streetName\" value={this.state.streetName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"City\" name=\"city\" value={this.state.city} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"State\" name=\"state\" value={this.state.state} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Zip\" name=\"zip\" value={this.state.zip} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\nfunction Businesses() {\n\n  const [businessList, setBusinessList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl('businesses');\n\n  // Fetched the table data when tableView is changed the whole page reRenders with another Select query\n  // using businessList as the second argument causes a loop!!\n  useEffect(() => {\n    axios.get(serverUrl('businesses')).then(response => setBusinessList(response.data));\n  }, [tableView]);\n\n\n  const addBusiness = (input) => {\n    const createUrl = baseUrl + \"/create\";\n    Axios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  };\n\n  // delete handler\n  const deleteBusiness = (id) => {\n    const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  // update handler\n  const updateBusiness = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input ).then(response => setTableView([]));\n  };\n\n  function DropDownBusinessActions(props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as={UpdateModal} business={props.business} />\n        <Dropdown.Item as=\"button\" onClick={() => deleteBusiness(props.business.businessID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  // Modal pop up form for update form submission\n  function UpdateModal(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal\n          size=\"xl\"\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={true}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.business.businessName} ID: {props.business.businessID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <BusinessForm type=\"Update\" onClick={updateBusiness} data={props.business} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n\n  function BusinessRow(props) {\n    return (\n      <tr>\n        <td>{props.business.businessID}</td>\n        <td>{props.business.businessName}</td>\n        <td>{props.business.buildingNumber}</td>\n        <td>{props.business.streetName}</td>\n        <td>{props.business.city}</td>\n        <td>{props.business.state}</td>\n        <td>{props.business.zip}</td>\n        <td>{props.business.individualOwner}</td>\n        <td>{props.business.familyOwner}</td>\n        <td>\n          <DropDownBusinessActions business={props.business} />\n        </td>\n      </tr>\n    );\n  }\n\n\n  return (\n    <Container fluid>\n      <h1>Businesses</h1>\n      <BusinessForm type=\"Create\" onClick={addBusiness} />\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Number</th>\n            <th>Street Name</th>\n            <th>City</th>\n            <th>State</th>\n            <th>Zip</th>\n            <th>Owner</th>\n            <th>Family</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            businessList.map((business, index) => (\n              <Fragment key={business.businessID}>\n                <BusinessRow business={business} />\n              </Fragment>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default Businesses;\n","import {Navbar,Nav} from 'react-bootstrap';\nimport Families from './components/Families';\nimport Individuals from './components/Individuals';\nimport Laws from './components/Laws';\nimport Businesses from './components/Businesses';\nimport {HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n     return (\n    <Router>\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Navbar</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/families\">Families</Nav.Link>\n            <Nav.Link as={Link} to=\"/individuals\">Individuals</Nav.Link>\n            <Nav.Link as={Link} to=\"/laws\">Laws</Nav.Link>\n            <Nav.Link as={Link} to=\"/businesses\">Businesses</Nav.Link>\n            </Nav>\n        </Navbar>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/individuals\">\n            <Individuals />\n          </Route>\n          <Route path=\"/families\">\n            <Families />\n          </Route>\n          <Route path=\"/laws\">\n            <Laws />\n          </Route>\n          <Route path=\"/businesses\">\n            <Businesses />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n    return (\n    <div>\n        <h2>Welcome to Mafia tracker!</h2>\n        Please use the links in the navigation bar to manage your entries.\n    </div>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}