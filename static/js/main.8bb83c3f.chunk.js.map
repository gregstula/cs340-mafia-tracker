{"version":3,"sources":["components/serverUrl.js","components/Families.js","components/Individuals.js","components/Laws.js","components/Businesses.js","App.js","reportWebVitals.js","index.js"],"names":["serverUrl","entity","FamilyForm","props","handleSubmit","onClick","state","familyID","handleOnChange","e","target","value","name","setState","data","Form","Row","Group","as","Col","Control","size","type","placeholder","this","familyName","onChange","Button","React","Component","showingBusinesses","showingMembers","Families","useState","familyList","setfamilyList","tableView","setTableView","baseUrl","useEffect","axios","get","then","response","updatefamily","id","input","updateUrl","put","DropDownFamilyActions","DropdownButton","title","Dropdown","Item","index","findIndex","val","push","length","Axios","members","splice","GetMembers","family","businesses","GetBusinesses","UpdateModal","deleteUrl","delete","deletefamily","show","setShow","handleClose","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Footer","variant","PrintMembers","membersList","colSpan","Table","striped","bordered","hover","map","member","firstName","lastName","age","mafiaRole","removeMemberUrl","i","person","individualID","RemoveMember","searchInput","potentialMembers","GetPotentialMembers","PrintPotentialMembers","guy","personID","newMemberUrl","resonse","AddMember","PrintBusinesses","businessesList","business","fName","lName","businessName","buildingNumber","streetName","city","zip","removeBusinessUrl","businessID","RemoveBusiness","potentialBusinesses","GetPotentialBusinesses","PrintPotentialBusinesses","newBusinessUrl","AddBusiness","FamilyRow","memberCount","Container","fluid","createUrl","post","IndividualForm","mafiaFamily","showingLawsBroken","searchTerm","Individuals","individualList","setIndividualList","PersonRow","DropDownPersonActions","PrintBusinessesOwned","businessesOwned","setBusinessOwnerToNullUrl","businessVal","SetBusinessOwnerToNull","addableBusinesses","GetAddableBusinesses","DisplayAddableBusinesses","businessUrl","businessIndex","SetBusinessOwner","PrintLawsBroken","lawsList","lawsBroken","law","lawName","sentence","lawID","unBreakLawUrl","respons","UnBreakLaw","breakableLaws","GetBreakableLaws","PrintBreakableLaws","lawUrl","BreakLaw","GetBusinessesOwned","GetLawsBroken","deleteIndividual","updateIndividual","getUrl","LawForm","showingLawBreakers","Laws","lawList","setlawList","updatelaw","DropDownLawActions","lawBreakers","GetLawBreakers","deletelaw","LawRow","PrintLawBreakers","breakersList","breaker","removeLawBreakerUrl","console","log","RemoveLawBreaker","potentialLawBreakers","GetPotentialLawBreakers","PrintPotentialLawBreakers","addLawBreakerUrl","AddLawBreaker","BusinessForm","Businesses","businessList","setBusinessList","updateBusiness","DropDownBusinessActions","deleteBusiness","BusinessRow","individualOwner","familyOwner","Home","App","Navbar","bg","Brand","Nav","className","Link","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bb83c3f.chunk.js","sourcesContent":["// change var for local or hosted\n\nfunction serverUrl(entity) {\n    const baseUrl = 'https://cs340-mafia-server.herokuapp.com/' + entity;\n    //const baseUrl = 'http://localhost:8000/' + entity;\n    return baseUrl;\n}\n\nexport default serverUrl;\n","import { Container, Form, Button/*, Row*/, Col, Table, Dropdown, DropdownButton, Modal } from 'react-bootstrap';\nimport React from 'react';\nimport { Fragment, useEffect, useState, useRef } from \"react\";\nimport Axios from \"axios\";\nimport axios from 'axios';\nimport serverUrl from './serverUrl';\n\n// Component for family form\n// Much more effecient at handling state and saving render calls\n// Can also be used in Update Component\nclass FamilyForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.familyID) {\n      onClick(this.state.familyID, this.state)\n    } else {\n      onClick(this.state);\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Name\" name=\"familyName\" value={this.state.familyName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\nvar showingBusinesses = [];\nvar showingMembers = [];\n\nfunction Families() {\n\n  const [familyList, setfamilyList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl('families');\n\n  // Fetched the table data when tableView is changed the whole page reRenders with another Select query\n  // using familyList as the second argument causes a loop!!\n  useEffect(() => {\n    axios.get(baseUrl).then(response => setfamilyList(response.data));\n  }, [tableView]);\n\n\n  const addfamily = (input) => {\n    const createUrl = baseUrl + \"/create\";\n    Axios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  };\n\n  // delete handler\n  const deletefamily = (id) => {\n    const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  // update handler\n  const updatefamily = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input).then(response => setTableView([]));\n  };\n\n  function DropDownFamilyActions(props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => GetMembers(props.family.familyID)}>Show/Hide Family members</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => GetBusinesses(props.family.familyID)}>Show/Hide businesses owned</Dropdown.Item>\n        <Dropdown.Item as={UpdateModal} family={props.family} />\n        <Dropdown.Item as=\"button\" onClick={() => deletefamily(props.family.familyID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  // Modal pop up form for update form submission\n  function UpdateModal(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal\n          size=\"xl\"\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={true}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.family.familyName} ID: {props.family.familyID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <FamilyForm type=\"Update\" onClick={updatefamily} data={props.family} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n\n  function GetMembers(familyID) {\n    //find the guy we're looking for, adding him if he doesn't exist\n    var index = showingMembers.findIndex((val) => {return val.familyID === familyID})\n    if(index < 0)\n    {\n      showingMembers.push({\"familyID\": familyID, \"members\": [], \"potentialMembers\": []});\n      index = showingMembers.length - 1;\n\n      Axios.get(baseUrl + `/getMembers/${familyID}`).then(response => {\n        showingMembers[index].members = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingMembers.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintMembers(props) {\n    var index = showingMembers.findIndex((val) => {return val.familyID === props.family.familyID});\n\n    if(index < 0)\n      return null;\n\n    var membersList = showingMembers[index].members;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Members</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Age</th>\n                    <th>Role</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    membersList.map(member => (\n                      <tr>\n                        <td>{member.firstName + \" \" + member.lastName}</td>\n                        <td>{member.age}</td>\n                        <td>{member.mafiaRole}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => RemoveMember(member.individualID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetPotentialMembers(input.target.value, index)\n                    }\n                    else {\n                      showingMembers[index].potentialMembers = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing people to add to the family\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingMembers[index].potentialMembers = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <PrintPotentialMembers index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetPotentialMembers(searchInput, index) {\n    Axios.get(baseUrl + `/searchPeople/${searchInput}`).then(response => {\n      showingMembers[index].potentialMembers = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function PrintPotentialMembers(props) {\n    var index = props.index;\n\n    if(showingMembers[index].potentialMembers.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Current Family</th>\n            <th>Current Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingMembers[index].potentialMembers.map(guy => {\n            return (\n              <tr>\n                <td>{guy.firstName + \" \" + guy.lastName}</td>\n                <td>{guy.age}</td>\n                <td>{guy.familyName}</td>\n                <td>{guy.mafiaRole}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => AddMember(guy.individualID, showingMembers[index].familyID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function AddMember(personID, familyID) {\n    const newMemberUrl = baseUrl + `/addMember/${personID}/${familyID}`;\n\n    //if that person was already a member of a family, we need to remove it from the previous family\n    showingMembers.map(family => {\n      var i = family.members.findIndex(person => {return person.individualID === personID});\n      if(i >= 0) {\n        //we've got it, so remove it\n        family.members.splice(i, 1);\n        //return true so that we stop looking\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    Axios.put(newMemberUrl).then(resonse => {\n      Axios.get(baseUrl + `/getMembers/${familyID}`).then(response => {\n        var index = showingMembers.findIndex((val) => {return val.familyID === familyID});\n        showingMembers[index].members = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function RemoveMember(id) {\n    const removeMemberUrl = baseUrl + `/removeMember/${id}`;\n    Axios.put(removeMemberUrl).then((response) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingMembers.map((family) => {\n        var i = family.members.findIndex((person) => {return person.individualID === id});\n        if(i >= 0)\n          family.members.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function GetBusinesses(familyID) {\n    //find the business we're looking for, adding it if it doesn't exist\n    var index = showingBusinesses.findIndex((val) => {return val.familyID === familyID})\n    if(index < 0)\n    {\n      showingBusinesses.push({\"familyID\": familyID, \"businesses\": [], \"potentialBusinesses\": []});\n      index = showingBusinesses.length - 1;\n\n      Axios.get(baseUrl + `/getBusinesses/${familyID}`).then(response => {\n        showingBusinesses[index].businesses = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingBusinesses.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintBusinesses(props) {\n    var index = showingBusinesses.findIndex((val) => {return val.familyID === props.family.familyID});\n\n    if(index < 0)\n      return null;\n\n    var businessesList = showingBusinesses[index].businesses;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Businesses Owned</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                  <th>Name</th>\n                  <th>Number</th>\n                  <th>street Name</th>\n                  <th>City</th>\n                  <th>State</th>\n                  <th>Zip</th>\n                  <th>Individual Owner</th>\n                  <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    businessesList.map(business => {\n\n                      var fName = business.firstName;\n                      var lName = business.lastName;\n                      if(!fName)\n                        fName = \"\";\n                      else\n                        lName = \" \" + lName;\n                      if(!lName)\n                        lName = \"\";\n\n                      return(\n                        <tr>\n                          <td>{business.businessName}</td>\n                          <td>{business.buildingNumber}</td>\n                          <td>{business.streetName}</td>\n                          <td>{business.city}</td>\n                          <td>{business.state}</td>\n                          <td>{business.zip}</td>\n                          <td>{fName + lName}</td>\n                          <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => RemoveBusiness(business.businessID)}>Delete</Button></td>\n                        </tr>\n                      )\n                    })\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetPotentialBusinesses(input.target.value, index)\n                    }\n                    else {\n                      showingBusinesses[index].potentialBusinesses = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing businesses to be owned by the family\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingBusinesses[index].potentialBusinesses = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <PrintPotentialBusinesses index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetPotentialBusinesses(searchInput, index) {\n    Axios.get(baseUrl + `/searchBusinesses/${searchInput}`).then(response => {\n      showingBusinesses[index].potentialBusinesses = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function PrintPotentialBusinesses(props) {\n    var index = props.index;\n\n    if(showingBusinesses[index].potentialBusinesses.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n          <th>Business Name</th>\n          <th>City</th>\n          <th>State</th>\n          <th>Current Individual Owner</th>\n          <th>Current Family Owner</th>\n          <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingBusinesses[index].potentialBusinesses.map(business => {\n            var fName = business.firstName;\n            var lName = business.lastName;\n            if(!fName)\n              fName = \"\";\n            else\n              lName = \" \" + lName;\n            if(!lName)\n              lName = \"\";\n\n            return (\n              <tr>\n                <td>{business.businessName}</td>\n                <td>{business.city}</td>\n                <td>{business.state}</td>\n                <td>{fName + lName}</td>\n                <td>{business.familyName}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => AddBusiness(business.businessID, showingBusinesses[index].familyID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function AddBusiness(businessID, familyID) {\n    const newBusinessUrl = baseUrl + `/addBusiness/${businessID}/${familyID}`;\n\n    //if that business was already owned by a family, we need to remove it from the previous family\n    showingBusinesses.map(family => {\n      var i = family.businesses.findIndex(business => {return business.businessID === businessID});\n      if(i >= 0) {\n        //we've got it, so remove it\n        family.businesses.splice(i, 1);\n        //return true so that we stop looking\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    Axios.put(newBusinessUrl).then(resonse => {\n      Axios.get(baseUrl + `/getBusinesses/${familyID}`).then(response => {\n        var index = showingBusinesses.findIndex((val) => {return val.familyID === familyID});\n        showingBusinesses[index].businesses = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function RemoveBusiness(id) {\n    const removeBusinessUrl = baseUrl + `/removeBusiness/${id}`;\n    Axios.put(removeBusinessUrl).then((response) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingBusinesses.map((family) => {\n        var i = family.businesses.findIndex((business) => {return business.businessID === id});\n        if(i >= 0)\n          family.businesses.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function FamilyRow(props) {\n    return (\n      <tr>\n        <td>{props.family.familyID}</td>\n        <td>{props.family.familyName}</td>\n        <td>{props.family.memberCount}</td>\n        <td>\n          <DropDownFamilyActions family={props.family} />\n        </td>\n      </tr>\n    );\n  }\n\n\n  return (\n    <Container fluid>\n      <h1>Families</h1>\n      <FamilyForm type=\"Create\" onClick={addfamily} />\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Member Count</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            familyList.map((family, index) => (\n              <Fragment key={family.familyID}>\n                <FamilyRow family={family} />\n                <PrintMembers family={family} />\n                <PrintBusinesses family={family} />\n              </Fragment>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default Families;\n\n\n{/* var families = [\n  {\n    \"id\": 1,\n    \"name\": \"Omerta\",\n    \"memberCount\": 2,\n    \"members\": [\n      {\n        \"fname\": \"Bill\",\n        \"lname\": \"Omerta\",\n        \"role\": \"Godfather\"\n      },\n      {\n        \"fname\": \"Matthew\",\n        \"lname\": \"Omerta\",\n        \"role\": \"Captain\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"USA Industries\",\n        \"address\": \"1221 Industrial Rd\",\n        \"city\": \"Newark\",\n        \"state\": \"New Jersey\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Murphy\",\n    \"memberCount\": 5,\n    \"members\": [\n      {\n        \"fname\": \"Brian\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Godfather\"\n      },\n      {\n        \"fname\": \"John\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Phil\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Frank\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Alex\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      },\n      {\n        \"fname\": \"Edgar\",\n        \"lname\": \"Murphy\",\n        \"role\": \"Captain\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"Domino's\",\n        \"address\": \"54232 NW Road Blvd\",\n        \"city\": \"Corvallis\",\n        \"state\": \"Oregon\"\n      },\n      {\n        \"name\": \"Pizza Hut\",\n        \"address\": \"812 East Blvd\",\n        \"city\": \"Corvallis\",\n        \"state\": \"Oregon\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Scott\",\n    \"memberCount\": 2,\n    \"members\": [\n      {\n        \"fname\": \"Michael\",\n        \"lname\": \"Scott\",\n        \"role\": \"Regional Manager\"\n      },\n      {\n        \"fname\": \"Dwight\",\n        \"lname\": \"Shrewt\",\n        \"role\": \"Assistant to the Regional Manager\"\n      }\n    ],\n    \"familyes\": [\n      {\n        \"name\": \"Dunder Mifflin\",\n        \"address\": \"4120 22nd St\",\n        \"city\": \"Scranton\",\n        \"state\": \"Pennsylvania\"\n      }\n    ],\n    \"showMembers\": false,\n    \"showfamilyes\": false,\n    \"editMode\":false\n  }\n]\n\n\n\n\nfunction Families() {\n\n  const [membersShown, setMembersShown] = useState(false);\n  const [familyesShown, setfamilyesShown] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n\n  function FamilyRow(props) {\n    if(families[props.index].editMode)\n      return(\n        <tr>\n          <td>{families[props.index].id}</td>\n          <td>\n            <Form>\n              <Form.Control size=\"m\" type=\"text\" value={families[props.index].name} />\n            </Form>\n          </td>\n          <td>#</td>\n          <td><Button type=\"submit\" onClick={() => toggleEditMode(props.index)}>Submit</Button></td>\n        </tr>\n      );\n    else\n      return (\n          <tr>\n            <td>{families[props.index].id}</td>\n            <td>{families[props.index].name}</td>\n            <td>{families[props.index].memberCount}</td>\n            <td>\n              <DropDownFamilyActions index={props.index}/>\n            </td>\n          </tr>\n      );\n  }\n\n\n  function DropDownFamilyActions (props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => ShowMembersSubTable(props.index)}>Show Members</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => ShowfamilySubTable(props.index)}>Show familyes</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => toggleEditMode(props.index)}>Update</Dropdown.Item>\n        <Dropdown.Item as=\"button\">Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  function familyesToggle(props) {\n    if(!families[props.index].showfamilyes)\n      return null;\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          <familySubTable index={props.index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function MembersToggle(props) {\n    if(!families[props.index].showMembers)\n      return null;\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          <MembersSubTable index={props.index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function ShowMembersSubTable(index) {\n    families[index].showMembers = !families[index].showMembers;\n    setMembersShown(!membersShown);\n  }\n\n  function ShowfamilySubTable(index) {\n    families[index].showfamilyes = !families[index].showfamilyes;\n    setfamilyesShown(!familyesShown);\n  }\n\n  function MembersSubTable(props) {\n    return (\n      <Container>\n          <b>Members</b>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Role</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              families[props.index].members.map(member => (\n                <tr>\n                  <td>{member.fname}</td>\n                  <td>{member.lname}</td>\n                  <td>{member.role}</td>\n                  <td><Button size=\"sm\" variant=\"danger\" type=\"delete\">Delete</Button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </Table>\n        <Form>\n          <Form.Control size=\"m\" type=\"text\" placeholder=\"Search for existing member to add to family\" />\n        </Form>\n      </Container>\n    );\n  }\n\n  function familySubTable(props) {\n    return (\n      <Container>\n          <b>familyes Ownes</b>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>family Name</th>\n              <th>Street Address</th>\n              <th>City</th>\n              <th>State</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              families[props.index].familyes.map(family => (\n                <tr>\n                  <td>{family.name}</td>\n                  <td>{family.address}</td>\n                  <td>{family.city}</td>\n                  <td>{family.state}</td>\n                  <td><Button size=\"sm\" variant=\"danger\" type=\"delete\">Delete</Button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </Table>\n        <Form>\n          <Form.Control size=\"m\" type=\"text\" placeholder=\"Search for existing family to add to familyes owned by this family\" />\n        </Form>\n      </Container>\n    );\n  }\n\n  function toggleEditMode(index) {\n    families[index].editMode = !families[index].editMode;\n    setEditMode(!editMode);\n  }\n\n  return (\n    <Container fluid>\n    <h1>Families</h1>\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th># of members</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          <tr>\n              <td>Input new family</td>\n            <td>\n              <Form>\n                <Form.Control size=\"lg\" type=\"text\" placeholder=\"Name\" />\n              </Form>\n            </td>\n            <td>#</td>\n            <td>\n              <Button type=\"submit\">Create</Button>\n            </td>\n          </tr>\n          {\n            families.map((family, index) => (\n              <>\n                <FamilyRow index={index} />\n                <MembersToggle index={index} />\n                <familyesToggle index={index} />\n              </>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\n\nexport default Families; */}\n","import {Container, Form/*, Row*/, Col, Button, Table, Dropdown, DropdownButton, Modal} from 'react-bootstrap';\n//import Actions from './Actions';\n\nimport React, { Fragment, useEffect, useState/*, useRef*/ } from 'react';\n\nimport Axios from \"axios\";\nimport axios from 'axios';\n\nimport serverUrl from './serverUrl';\n\n\nclass IndividualForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.individualID) {\n      onClick(this.state.individualID, this.state) //since individualID is available, we're updating something\n    } else {\n      onClick(this.state); //since individualID is unavailable, we're making a new individual\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"First name\" name=\"firstName\" value={this.state.firstName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Last name\" name=\"lastName\" value={this.state.lastName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Age\" name=\"age\" value={this.state.age} onChange={this.handleOnChange} />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Mafia family (exact)\" name=\"mafiaFamily\" value={this.state.mafiaFamily} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Role in family\" name=\"mafiaRole\" value={this.state.mafiaRole} onChange={this.handleOnChange} />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\n\nvar showingBusinesses = [];\nvar showingLawsBroken = [];\nvar searchTerm = \"\";\n\nfunction Individuals() {\n\n  const [individualList, setIndividualList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl(\"individuals\");\n\n  useEffect(() => {\n    var getUrl = serverUrl(\"individuals\")\n    if(searchTerm !== \"\")\n      getUrl += `/${searchTerm}`;\n\n    axios.get(getUrl).then(response => setIndividualList(response.data));\n  }, [tableView]);\n\n\n  function PersonRow(props) {\n    return (\n        <tr>\n          <td>{props.person.individualID}</td>\n          <td>{props.person.firstName}</td>\n          <td>{props.person.lastName}</td>\n          <td>{props.person.age}</td>\n          <td>{props.person.familyName}</td>\n          <td>{props.person.mafiaRole}</td>\n          <td>\n            <DropDownPersonActions person={props.person}/>\n          </td>\n        </tr>\n    );\n  }\n\n\n  function GetBusinessesOwned(personID) {\n    //find the guy we're looking for, adding him if he doesn't exist\n    var index = showingBusinesses.findIndex((val) => {return val.personID === personID})\n    if(index < 0)\n    {\n      showingBusinesses.push({\"personID\": personID, \"businessesOwned\": [], \"addableBusinesses\": []});\n      index = showingBusinesses.length - 1;\n\n      Axios.get(baseUrl + `/getBusinesses/${personID}`).then(response => {\n        showingBusinesses[index].businessesOwned = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingBusinesses.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintBusinessesOwned(props) {\n    var index = showingBusinesses.findIndex((val) => {return val.personID === props.person.individualID});\n    if(index < 0)\n      return null;\n\n    var businessesList = showingBusinesses[index].businessesOwned;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Businesses owned</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Number</th>\n                    <th>street Name</th>\n                    <th>City</th>\n                    <th>State</th>\n                    <th>Zip</th>\n                    <th>Family Owner</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    businessesList.map(business => (\n                      <tr>\n                        <td>{business.businessName}</td>\n                        <td>{business.buildingNumber}</td>\n                        <td>{business.streetName}</td>\n                        <td>{business.city}</td>\n                        <td>{business.state}</td>\n                        <td>{business.zip}</td>\n                        <td>{business.familyName}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => SetBusinessOwnerToNull(business.businessID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetAddableBusinesses(input.target.value, index)\n                    }\n                    else {\n                      showingBusinesses[index].addableBusinesses = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing business to add to businesses owned by this person\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingBusinesses[index].addableBusinesses = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <DisplayAddableBusinesses index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetAddableBusinesses(searchInput, index) {\n\n    Axios.get(baseUrl + `/searchBusinesses/${searchInput}`).then(response => {\n      showingBusinesses[index].addableBusinesses = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function DisplayAddableBusinesses(props) {\n\n    var index = props.index;\n\n    if(showingBusinesses[index].addableBusinesses.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Business Name</th>\n            <th>City</th>\n            <th>State</th>\n            <th>Current Individual Owner</th>\n            <th>Current Family Owner</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingBusinesses[index].addableBusinesses.map(business => {\n            var fName = business.firstName;\n            var lName = business.lastName;\n            if(!fName)\n              fName = \"\";\n            else\n              lName = \" \" + lName;\n            if(!lName)\n              lName = \"\";\n\n            return (\n              <tr>\n                <td>{business.businessName}</td>\n                <td>{business.city}</td>\n                <td>{business.state}</td>\n                <td>{fName + lName}</td>\n                <td>{business.familyName}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => SetBusinessOwner(business.businessID, showingBusinesses[index].personID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function SetBusinessOwner(businessID, personID) {\n    const businessUrl = baseUrl + `/setBusinessOwner/${businessID}/${personID}`;\n\n    //if that business was already owned, we need to remove it from the previous owner's businessesOwned\n    showingBusinesses.map(person => {\n      var businessIndex = person.businessesOwned.findIndex(business => {return business.businessID === businessID});\n      if(businessIndex >= 0) {\n        //we've got it, so remove it\n        person.businessesOwned.splice(businessIndex, 1);\n        //return true so that we stop looking\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    Axios.put(businessUrl).then(resonse => {\n      Axios.get(baseUrl + `/getBusinesses/${personID}`).then(response => {\n        var index = showingBusinesses.findIndex((val) => {return val.personID === personID});\n        showingBusinesses[index].businessesOwned = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function SetBusinessOwnerToNull(id) {\n    const setBusinessOwnerToNullUrl = baseUrl + `/setBusinessOwnerToNull/${id}`;\n    Axios.put(setBusinessOwnerToNullUrl).then((response) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingBusinesses.map((person) => {\n        var i = person.businessesOwned.findIndex((businessVal) => {return businessVal.businessID === id});\n        if(i >= 0)\n          person.businessesOwned.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function GetLawsBroken(personID) {\n    //find the guy we're looking for, adding him if he doesn't exist\n    var index = showingLawsBroken.findIndex((val) => {return val.personID === personID})\n    if(index < 0)\n    {\n      showingLawsBroken.push({\"personID\": personID, \"lawsBroken\": [], \"breakableLaws\": []});\n      index = showingLawsBroken.length - 1;\n\n      Axios.get(baseUrl + `/getLawsBroken/${personID}`).then(response => {\n        showingLawsBroken[index].lawsBroken = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if he already exists, just remove him\n    {\n      showingLawsBroken.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintLawsBroken(props) {\n    var index = showingLawsBroken.findIndex((val) => {return val.personID === props.person.individualID});\n\n    if(index < 0)\n      return null;\n\n    var lawsList = showingLawsBroken[index].lawsBroken;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Laws broken</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Law Name</th>\n                    <th>Sentence</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    lawsList.map(law => (\n                      <tr>\n                        <td>{law.lawName}</td>\n                        <td>{law.sentence}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => UnBreakLaw(law.lawID, props.person.individualID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetBreakableLaws(input.target.value, index)\n                    }\n                    else {\n                      showingLawsBroken[index].breakableLaws = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing laws to add to list of laws broken by this person\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingLawsBroken[index].breakableLaws = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <PrintBreakableLaws index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetBreakableLaws(searchInput, index) {\n    Axios.get(baseUrl + `/searchLaws/${searchInput}`).then(response => {\n      showingLawsBroken[index].breakableLaws = response.data;\n      //setTableView([]);\n    });\n  }\n\n  function PrintBreakableLaws(props) {\n    var index = props.index;\n\n    if(showingLawsBroken[index].breakableLaws.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Law Name</th>\n            <th>Sentence</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingLawsBroken[index].breakableLaws.map(law => {\n            return (\n              <tr>\n                <td>{law.lawName}</td>\n                <td>{law.sentence}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => BreakLaw(law.lawID, showingLawsBroken[index].personID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n  }\n\n  function BreakLaw(lawID, personID) {\n    const lawUrl = baseUrl + `/breakLaw/${lawID}/${personID}`;\n\n    Axios.put(lawUrl).then(resonse => {\n      Axios.get(baseUrl + `/getLawsBroken/${personID}`).then(response => {\n        var index = showingLawsBroken.findIndex((val) => {return val.personID === personID});\n        showingLawsBroken[index].lawsBroken = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function UnBreakLaw(lawID, personID) {\n    const unBreakLawUrl = baseUrl + `/unBreakLaw/${lawID}/${personID}`;\n    Axios.delete(unBreakLawUrl).then((respons) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingLawsBroken.map((person) => {\n        var i = person.lawsBroken.findIndex((law) => {return law.lawID === lawID});\n        if(i >= 0)\n          person.lawsBroken.splice(i, 1);\n\n        return i;\n      });\n\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  function DropDownPersonActions (props) {\n\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => GetBusinessesOwned(props.person.individualID)}>Show/Hide businesses owned</Dropdown.Item>\n        <Dropdown.Item as=\"button\" onClick={() => GetLawsBroken(props.person.individualID)}>Show/Hide laws broken</Dropdown.Item>\n        <Dropdown.Item as={UpdateModal} person={props.person} />\n        <Dropdown.Item as=\"button\" onClick={() => deleteIndividual(props.person.individualID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n\n  const addIndividual = (input) => {\n  \tconst createUrl = baseUrl + \"/create\";\n  \tAxios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  }\n\n  function UpdateModal(props) {\n\t   const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal size=\"xl\" show={show} onHide={handleClose} backdrop=\"static\" keyboard={true}>\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.person.firstName + \" \" + props.person.lastName} ID: {props.person.individualID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <IndividualForm type=\"Update\" onClick={updateIndividual} data={props.person} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  const updateIndividual = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input ).then(response => setTableView([]));\n  };\n\n  const deleteIndividual = (id) => {\n\t   const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  return (\n    <Container fluid>\n      <h1>Individuals</h1>\n\n      <Form>\n        <Form.Row>\n          <Col>\n            <Form.Control size=\"m\" type=\"text\" placeholder=\"Search by first or last name (not both)\" onChange={(input) => {\n              searchTerm = input.target.value;\n            }}/>\n          </Col>\n          <Col>\n            <Button type=\"search\" onClick={() => {\n              setTableView([]);\n            }}>Search</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <p></p>\n\n\t  <IndividualForm type=\"Create\" onClick={addIndividual} data={{\"firstName\": \"\", \"lastName\":\"\", \"age\":\"\", \"mafiaFamily\":\"\", \"mafiaRole\":\"\"}}/>\n\n\t  <p></p>\n\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Age</th>\n            <th>Mafia Family</th>\n            <th>Mafia Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {\n            individualList.map((person, index) => (\n              <Fragment key={person.individualID}>\n                <PersonRow person={person} />\n                <PrintBusinessesOwned person={person} />\n                <PrintLawsBroken person={person} />\n              </Fragment>\n            ))\n          }\n\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\n\n\n\n\nexport default Individuals;\n","\nimport { Container, Form, Button/*, Row*/, Col, Table, Dropdown, DropdownButton, Modal } from 'react-bootstrap';\nimport React from 'react';\nimport { Fragment, useEffect, useState/*, useRef*/ } from \"react\";\nimport Axios from \"axios\";\nimport axios from 'axios';\nimport serverUrl from './serverUrl';\n\n// Component for law form\n// Much more effecient at handling state and saving render calls\n// Can also be used in Update Component\nclass LawForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.lawID) {\n      onClick(this.state.lawID, this.state)\n    } else {\n      onClick(this.state);\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Name\" name=\"lawName\" value={this.state.lawName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Sentence\" name=\"sentence\" value={this.state.sentence} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\nvar showingLawBreakers = [];\n\nfunction Laws() {\n\n  const [lawList, setlawList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl('Laws');\n\n  // Fetched the table data when tableView is changed the whole page reRenders with another Select query\n  // using lawList as the second argument causes a loop!!\n  useEffect(() => {\n    axios.get(baseUrl).then(response => setlawList(response.data));\n  }, [tableView]);\n\n\n  const addlaw = (input) => {\n    const createUrl = baseUrl + \"/create\";\n    Axios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  };\n\n  // delete handler\n  const deletelaw = (id) => {\n    const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  // update handler\n  const updatelaw = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input).then(response => setTableView([]));\n  };\n\n  function DropDownLawActions(props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as=\"button\" onClick={() => GetLawBreakers(props.law.lawID)}>Show/Hide Law Breakers</Dropdown.Item>\n        <Dropdown.Item as={UpdateModal} law={props.law} />\n        <Dropdown.Item as=\"button\" onClick={() => deletelaw(props.law.lawID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  // Modal pop up form for update form submission\n  function UpdateModal(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal\n          size=\"xl\"\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={true}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.law.lawName} ID: {props.law.lawID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <LawForm type=\"Update\" onClick={updatelaw} data={props.law} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n\n  function LawRow(props) {\n    return (\n      <tr>\n        <td>{props.law.lawID}</td>\n        <td>{props.law.lawName}</td>\n        <td>{props.law.sentence}</td>\n        <td>\n          <DropDownLawActions law={props.law} />\n        </td>\n      </tr>\n    );\n  }\n\n\n  function GetLawBreakers(lawID) {\n    //find the law we're looking for, adding it if it doesn't exist\n    var index = showingLawBreakers.findIndex((val) => {return val.lawID === lawID})\n    if(index < 0)\n    {\n      showingLawBreakers.push({\"lawID\": lawID, \"lawBreakers\": [], \"potentialLawBreakers\": []});\n      index = showingLawBreakers.length - 1;\n\n      Axios.get(baseUrl + `/getLawBreakers/${lawID}`).then(response => {\n        showingLawBreakers[index].lawBreakers = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    }\n    else //if it already exists, just remove it\n    {\n      showingLawBreakers.splice(index, 1);\n\n      //now that we're finished, rerender;\n      setTableView([]);\n    }\n  }\n\n  function PrintLawBreakers(props) {\n\n    var index = showingLawBreakers.findIndex((val) => {return val.lawID === props.law.lawID});\n\n    if(index < 0)\n      return null;\n\n    var breakersList = showingLawBreakers[index].lawBreakers;\n\n    return (\n      <tr>\n        <td colSpan=\"7\">\n              <b>Law Breakers</b>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Mafia Family</th>\n                    <th>Mafia Role</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    breakersList.map(breaker => (\n                      <tr>\n                        <td>{breaker.firstName + \" \" + breaker.lastName}</td>\n                        <td>{breaker.familyName}</td>\n                        <td>{breaker.mafiaRole}</td>\n                        <td><Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => RemoveLawBreaker(breaker.individualID, props.law.lawID)}>Delete</Button></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </Table>\n              <Form>\n                <Form.Control\n                  size=\"m\"\n                  type=\"text\"\n                  onChange={(input) => {\n                    if(input.target.value) {\n                      GetPotentialLawBreakers(input.target.value, index)\n                    }\n                    else {\n                      showingLawBreakers[index].potentialLawBreakers = [];\n                    }\n                  }}\n                  placeholder=\"Search for existing people to add to list of people who broke this law\"\n                />\n              </Form>\n              <Button size=\"sm\" type=\"search\" onClick={() => {\n                  setTableView([]);\n                }}>Search</Button>\n              <Button size=\"sm\" variant=\"danger\" type=\"delete\" onClick={() => {\n                  showingLawBreakers[index].potentialLawBreakers = [];\n                  setTableView([]);\n                }}>Clear Results</Button>\n              <PrintPotentialLawBreakers index={index}/>\n        </td>\n      </tr>\n    );\n  }\n\n  function GetPotentialLawBreakers(searchInput, index) {\n\n    Axios.get(baseUrl + `/searchPeople/${searchInput}`).then(response => {\n      showingLawBreakers[index].potentialLawBreakers = response.data;\n    });\n  }\n\n  function PrintPotentialLawBreakers(props) {\n\n    var index = props.index;\n\n    if(showingLawBreakers[index].potentialLawBreakers.length === 0)\n      return null;\n\n    return (\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Mafia Family</th>\n            <th>Mafia Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>{\n          showingLawBreakers[index].potentialLawBreakers.map(person => {\n            return (\n              <tr>\n                <td>{person.firstName + \" \" + person.lastName}</td>\n                <td>{person.familyName}</td>\n                <td>{person.mafiaRole}</td>\n                <td><Button size=\"sm\" type=\"submit\" onClick={() => AddLawBreaker(person.individualID, showingLawBreakers[index].lawID)}>Add</Button></td>\n              </tr>\n            )\n          })\n        }</tbody>\n      </Table>\n    );\n\n  }\n\n  function AddLawBreaker(personID, lawID) {\n\n    const addLawBreakerUrl = baseUrl + `/addLawBreaker/${personID}/${lawID}`;\n\n    Axios.put(addLawBreakerUrl).then(resonse => {\n      Axios.get(baseUrl + `/getLawBreakers/${lawID}`).then(response => {\n        var index = showingLawBreakers.findIndex((val) => {return val.lawID === lawID});\n        showingLawBreakers[index].lawBreakers = response.data;\n        //now that we're finished, rerender;\n        setTableView([]);\n      });\n    });\n  }\n\n  function RemoveLawBreaker(personID, lawID) {\n\n    const removeLawBreakerUrl = baseUrl + `/removeLawBreaker/${personID}/${lawID}`;\n    Axios.delete(removeLawBreakerUrl).then((response) => {\n      //the things removed from the database, we just need to remove it from the array\n      showingLawBreakers.map((law) => {\n        var i = law.lawBreakers.findIndex((person) => {return person.individualID === personID});\n        if(i >= 0)\n          law.lawBreakers.splice(i, 1);\n        else {\n          console.log(\"not found\");\n        }\n\n        return i;\n      });\n\n      console.log(showingLawBreakers);\n      setTableView([]); //rerender now that the thing in the array has been removed\n    });\n  }\n\n\n  return (\n    <Container fluid>\n      <h1>Laws</h1>\n      <LawForm type=\"Create\" onClick={addlaw} />\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Sentence</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            lawList.map((law, index) => (\n              <Fragment key={law.lawID}>\n                <LawRow law={law} />\n                <PrintLawBreakers law={law} />\n              </Fragment>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default Laws;\n","import { Container, Form, Button, Col, Table, Dropdown, DropdownButton, Modal } from 'react-bootstrap';\nimport React from 'react';\nimport { Fragment, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport axios from 'axios';\nimport serverUrl from './serverUrl';\n\n// Component for business form\n// Much more effecient at handling state and saving render calls\n// Can also be used in Update Component\nclass BusinessForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { ...this.props.data };\n  }\n\n  // just resets the form input on submit\n  handleSubmit = (onClick) => {\n    if (this.state.businessID) {\n      onClick(this.state.businessID, this.state)\n    } else {\n      onClick(this.state);\n    }\n  }\n\n  handleOnChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <>\n        <Form  >\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Name\" name=\"businessName\" value={this.state.businessName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Building Number\" name=\"buildingNumber\" value={this.state.buildingNumber} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Street\" name=\"streetName\" value={this.state.streetName} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"City\" name=\"city\" value={this.state.city} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"State\" name=\"state\" value={this.state.state} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Zip\" name=\"zip\" value={this.state.zip} onChange={this.handleOnChange} />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button type=\"submit\" onClick={() => this.handleSubmit(this.props.onClick)}>{this.props.type}</Button>\n            </Form.Group>\n          </Form.Row>\n        </ Form>\n      </>\n    );\n  }\n}\n\nfunction Businesses() {\n\n  const [businessList, setBusinessList] = useState([]);\n  const [tableView, setTableView] = useState([]);\n\n  const baseUrl = serverUrl('businesses');\n\n  // Fetched the table data when tableView is changed the whole page reRenders with another Select query\n  // using businessList as the second argument causes a loop!!\n  useEffect(() => {\n    axios.get(serverUrl('businesses')).then(response => setBusinessList(response.data));\n  }, [tableView]);\n\n\n  const addBusiness = (input) => {\n    const createUrl = baseUrl + \"/create\";\n    Axios.post(createUrl, input).then(() => {\n      setTableView([]); // does nothing but forces a reRerender\n    });\n  };\n\n  // delete handler\n  const deleteBusiness = (id) => {\n    const deleteUrl = baseUrl + `/delete/${id}`\n    Axios.delete(deleteUrl).then((response) => {\n      setTableView([]);\n    });\n  };\n\n\n  // update handler\n  const updateBusiness = (id, input) => {\n    const updateUrl = baseUrl + `/update/${id}`;\n    axios.put(updateUrl, input ).then(response => setTableView([]));\n  };\n\n  function DropDownBusinessActions(props) {\n    return (\n      <DropdownButton id=\"dropdown-item-button\" title=\"Actions\">\n        <Dropdown.Item as={UpdateModal} business={props.business} />\n        <Dropdown.Item as=\"button\" onClick={() => deleteBusiness(props.business.businessID)}>Delete</Dropdown.Item>\n      </DropdownButton>\n    );\n  }\n\n  // Modal pop up form for update form submission\n  function UpdateModal(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Dropdown.Item as='button' onClick={handleShow}>\n          Update\n        </Dropdown.Item>\n\n        <Modal\n          size=\"xl\"\n          show={show}\n          onHide={handleClose}\n          backdrop=\"static\"\n          keyboard={true}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Update {props.business.businessName} ID: {props.business.businessID}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <BusinessForm type=\"Update\" onClick={updateBusiness} data={props.business} />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n\n  function BusinessRow(props) {\n    return (\n      <tr>\n        <td>{props.business.businessID}</td>\n        <td>{props.business.businessName}</td>\n        <td>{props.business.buildingNumber}</td>\n        <td>{props.business.streetName}</td>\n        <td>{props.business.city}</td>\n        <td>{props.business.state}</td>\n        <td>{props.business.zip}</td>\n        <td>{props.business.individualOwner}</td>\n        <td>{props.business.familyOwner}</td>\n        <td>\n          <DropDownBusinessActions business={props.business} />\n        </td>\n      </tr>\n    );\n  }\n\n\n  return (\n    <Container fluid>\n      <h1>Businesses</h1>\n      <BusinessForm type=\"Create\" onClick={addBusiness} />\n      <Table bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Number</th>\n            <th>Street Name</th>\n            <th>City</th>\n            <th>State</th>\n            <th>Zip</th>\n            <th>Owner</th>\n            <th>Family</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            businessList.map((business, index) => (\n              <Fragment key={business.businessID}>\n                <BusinessRow business={business} />\n              </Fragment>\n            ))\n          }\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default Businesses;\n","import {Navbar,Nav} from 'react-bootstrap';\nimport Families from './components/Families';\nimport Individuals from './components/Individuals';\nimport Laws from './components/Laws';\nimport Businesses from './components/Businesses';\nimport {HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n     return (\n    <Router>\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Navbar</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/families\">Families</Nav.Link>\n            <Nav.Link as={Link} to=\"/individuals\">Individuals</Nav.Link>\n            <Nav.Link as={Link} to=\"/laws\">Laws</Nav.Link>\n            <Nav.Link as={Link} to=\"/businesses\">Businesses</Nav.Link>\n            </Nav>\n        </Navbar>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/individuals\">\n            <Individuals />\n          </Route>\n          <Route path=\"/families\">\n            <Families />\n          </Route>\n          <Route path=\"/laws\">\n            <Laws />\n          </Route>\n          <Route path=\"/businesses\">\n            <Businesses />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n    return (\n    <div>\n        <h2>Welcome to Mafia tracker!</h2>\n        Please use the links in the navigation bar to manage your entries.\n    </div>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}